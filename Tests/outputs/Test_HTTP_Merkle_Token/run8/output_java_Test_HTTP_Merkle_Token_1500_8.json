[
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_Merkle_Token >\n",
        0.02338099479675293,
        0.02
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        0.5386159420013428,
        2.13
    ],
    [
        "Num of variable reads = 1480\n",
        0.5459203720092773,
        2.15
    ],
    [
        "Num of conditional writes = 0\n",
        0.5517394542694092,
        2.17
    ],
    [
        "Num of words per element = 1\n",
        0.556420087814331,
        2.19
    ],
    [
        "Num of variable writes = 0\n",
        0.5603485107421875,
        2.1999999999999997
    ],
    [
        "num of accesses = 1480\n",
        0.5636172294616699,
        2.2199999999999998
    ],
    [
        "Packing Option = 1\n",
        0.5665934085845947,
        2.23
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        0.5693526268005371,
        2.23
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        0.5719316005706787,
        2.25
    ],
    [
        "done with read only memory solutions!\n",
        1.1872355937957764,
        3.3200000000000003
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.203571081161499,
        3.3499999999999996
    ],
    [
        "Num of variable reads = 128\n",
        1.217790126800537,
        3.3600000000000003
    ],
    [
        "Num of conditional writes = 0\n",
        1.2306411266326904,
        3.37
    ],
    [
        "Num of words per element = 1\n",
        1.2398262023925781,
        3.38
    ],
    [
        "Num of variable writes = 0\n",
        1.2503008842468262,
        3.3899999999999997
    ],
    [
        "num of accesses = 128\n",
        1.2606217861175537,
        3.42
    ],
    [
        "Packing Option = 1\n",
        1.2720892429351807,
        3.4299999999999997
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.2833526134490967,
        3.4400000000000004
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.2944462299346924,
        3.45
    ],
    [
        "Num of variable reads = 520\n",
        1.3053207397460938,
        3.46
    ],
    [
        "Num of conditional writes = 0\n",
        1.3157711029052734,
        3.4699999999999998
    ],
    [
        "Num of words per element = 1\n",
        1.3260979652404785,
        3.4800000000000004
    ],
    [
        "Num of variable writes = 0\n",
        1.3362369537353516,
        3.49
    ],
    [
        "num of accesses = 520\n",
        1.3462178707122803,
        3.5
    ],
    [
        "Packing Option = 1\n",
        1.3563318252563477,
        3.51
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.3662264347076416,
        3.5199999999999996
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.3758585453033447,
        3.5300000000000002
    ],
    [
        "done with read only memory solutions!\n",
        1.6763834953308105,
        3.87
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6923606395721436,
        3.8899999999999997
    ],
    [
        "Num of variable reads = 128\n",
        1.705897331237793,
        3.9000000000000004
    ],
    [
        "Num of conditional writes = 0\n",
        1.7175652980804443,
        3.92
    ],
    [
        "Num of words per element = 1\n",
        1.7269036769866943,
        3.9299999999999997
    ],
    [
        "Num of variable writes = 0\n",
        1.7346224784851074,
        3.9400000000000004
    ],
    [
        "num of accesses = 128\n",
        1.7416081428527832,
        3.9400000000000004
    ],
    [
        "Packing Option = 1\n",
        1.7482848167419434,
        3.95
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.754462718963623,
        3.96
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.7605812549591064,
        3.96
    ],
    [
        "Num of variable reads = 71\n",
        1.7668187618255615,
        3.9699999999999998
    ],
    [
        "Num of conditional writes = 0\n",
        1.7730329036712646,
        3.9699999999999998
    ],
    [
        "Num of words per element = 1\n",
        1.779214859008789,
        3.9800000000000004
    ],
    [
        "Num of variable writes = 0\n",
        1.7853460311889648,
        3.9800000000000004
    ],
    [
        "num of accesses = 71\n",
        1.7914183139801025,
        3.99
    ],
    [
        "Packing Option = 1\n",
        1.8038558959960938,
        4.01
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.8123033046722412,
        4.02
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.8200700283050537,
        4.03
    ],
    [
        "Num of variable reads = 128\n",
        1.8272836208343506,
        4.04
    ],
    [
        "Num of conditional writes = 0\n",
        1.8341584205627441,
        4.04
    ],
    [
        "Num of words per element = 1\n",
        1.8410797119140625,
        4.05
    ],
    [
        "Num of variable writes = 0\n",
        1.847299337387085,
        4.06
    ],
    [
        "num of accesses = 128\n",
        1.8530988693237305,
        4.06
    ],
    [
        "Packing Option = 0\n",
        1.8588452339172363,
        4.07
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.8651680946350098,
        4.07
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.87129545211792,
        4.08
    ],
    [
        "Num of variable reads = 71\n",
        1.8774604797363281,
        4.09
    ],
    [
        "Num of conditional writes = 0\n",
        1.8853447437286377,
        4.09
    ],
    [
        "Num of words per element = 1\n",
        1.8932766914367676,
        4.1
    ],
    [
        "Num of variable writes = 0\n",
        1.9031519889831543,
        4.13
    ],
    [
        "num of accesses = 71\n",
        1.9136474132537842,
        4.14
    ],
    [
        "Packing Option = 1\n",
        1.923825979232788,
        4.17
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.9409534931182861,
        4.2
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.9554252624511719,
        4.21
    ],
    [
        "Num of variable reads = 128\n",
        1.9667329788208008,
        4.23
    ],
    [
        "Num of conditional writes = 0\n",
        1.9785454273223877,
        4.26
    ],
    [
        "Num of words per element = 1\n",
        1.9899308681488037,
        4.26
    ],
    [
        "Num of variable writes = 0\n",
        2.001033067703247,
        4.279999999999999
    ],
    [
        "num of accesses = 128\n",
        2.011848211288452,
        4.289999999999999
    ],
    [
        "Packing Option = 0\n",
        2.0223817825317383,
        4.300000000000001
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.0326883792877197,
        4.32
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.0419392585754395,
        4.32
    ],
    [
        "Num of variable reads = 0\n",
        2.0503625869750977,
        4.32
    ],
    [
        "Num of conditional writes = 0\n",
        2.0584306716918945,
        4.34
    ],
    [
        "Num of words per element = 1\n",
        2.0671236515045166,
        4.35
    ],
    [
        "Num of variable writes = 0\n",
        2.078033685684204,
        4.380000000000001
    ],
    [
        "num of accesses = 0\n",
        2.0898163318634033,
        4.4
    ],
    [
        "Packing Option = 0\n",
        2.101001739501953,
        4.42
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.11173415184021,
        4.4399999999999995
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.1222307682037354,
        4.460000000000001
    ],
    [
        "Num of variable reads = 15080\n",
        2.133047103881836,
        4.48
    ],
    [
        "Num of conditional writes = 0\n",
        2.1435108184814453,
        4.51
    ],
    [
        "Num of words per element = 1\n",
        2.153970956802368,
        4.52
    ],
    [
        "Num of variable writes = 0\n",
        2.1638340950012207,
        4.539999999999999
    ],
    [
        "num of accesses = 15080\n",
        2.173034191131592,
        4.539999999999999
    ],
    [
        "Packing Option = 1\n",
        2.181525707244873,
        4.550000000000001
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        2.190117597579956,
        4.57
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        2.1994645595550537,
        4.59
    ],
    [
        "done with read only memory solutions!\n",
        2.2097697257995605,
        4.630000000000001
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.219919204711914,
        4.65
    ],
    [
        "Num of variable reads = 5\n",
        2.2302582263946533,
        4.68
    ],
    [
        "Num of conditional writes = 0\n",
        2.241164207458496,
        4.710000000000001
    ],
    [
        "Num of words per element = 1\n",
        2.253247022628784,
        4.74
    ],
    [
        "Num of variable writes = 0\n",
        2.2663369178771973,
        4.79
    ],
    [
        "num of accesses = 5\n",
        2.28009295463562,
        4.8500000000000005
    ],
    [
        "Packing Option = 1\n",
        2.2941734790802,
        4.890000000000001
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.308655023574829,
        4.95
    ],
    [
        "Phase 1: Analysis Completed!\n",
        2.32301926612854,
        5.010000000000001
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_Merkle_Token >\n",
        2.3371386528015137,
        5.05
    ],
    [
        "Circuit Generation Done for < Test_HTTP_Merkle_Token >  \n",
        7.121173620223999,
        31.740000000000002
    ],
    [
        " \t Total Number of Constraints :  2539752\n",
        7.1735663414001465,
        32.26
    ],
    [
        "\n",
        7.228381395339966,
        32.42
    ],
    [
        "Instruction queue size: 11500133\n",
        7.28381085395813,
        32.78
    ],
    [
        "Normal execution\n",
        17.516781091690063,
        46.230000000000004
    ],
    [
        "Running Sample Run: run15001\n",
        17.554035425186157,
        46.24
    ],
    [
        "tls_data.txt\n",
        17.588151931762695,
        46.24
    ],
    [
        "merkle_data.txt\n",
        17.623390197753906,
        46.260000000000005
    ],
    [
        "asdfghc\n",
        17.65973448753357,
        46.31
    ],
    [
        "97\n",
        17.698312044143677,
        46.42
    ],
    [
        "115\n",
        17.73867177963257,
        46.510000000000005
    ],
    [
        "100\n",
        17.77919340133667,
        46.550000000000004
    ],
    [
        "102\n",
        17.818926572799683,
        46.59
    ],
    [
        "103\n",
        17.85929846763611,
        46.63
    ],
    [
        "7\n",
        17.899935007095337,
        46.67
    ],
    [
        "Evaluating Input on the circuit \n",
        17.942819595336914,
        46.78
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        17.985909700393677,
        46.86
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        18.029556274414062,
        46.970000000000006
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        18.072700262069702,
        47.02
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        18.115046501159668,
        47.07
    ],
    [
        "\t[input] Value of Wire # 21 :: 7\n",
        18.156811952590942,
        47.11
    ],
    [
        "\t[input] Value of Wire # 22 :: 297ca9c14951fbaad217dc76566893385ae3ed90b54baf41c6ba205e35a0b646\n",
        18.19752073287964,
        47.160000000000004
    ],
    [
        "\t[input] Value of Wire # 23 :: e3\n",
        18.23885154724121,
        47.2
    ],
    [
        "\t[input] Value of Wire # 32 :: bf\n",
        18.279998302459717,
        47.24
    ],
    [
        "\t[input] Value of Wire # 41 :: a4\n",
        18.321364164352417,
        47.290000000000006
    ],
    [
        "\t[input] Value of Wire # 50 :: 1\n",
        18.36261487007141,
        47.34
    ],
    [
        "\t[input] Value of Wire # 59 :: a4\n",
        18.472769737243652,
        48.4
    ],
    [
        "\t[input] Value of Wire # 68 :: 40\n",
        18.518925189971924,
        48.529999999999994
    ],
    [
        "\t[input] Value of Wire # 77 :: ed\n",
        18.557132959365845,
        48.56
    ],
    [
        "\t[input] Value of Wire # 86 :: 41\n",
        18.595200061798096,
        48.61000000000001
    ],
    [
        "\t[input] Value of Wire # 95 :: f\n",
        18.669273138046265,
        48.620000000000005
    ],
    [
        "\t[input] Value of Wire # 104 :: 3b\n",
        18.70677161216736,
        48.64
    ],
    [
        "\t[input] Value of Wire # 113 :: d0\n",
        18.74345636367798,
        48.67
    ],
    [
        "\t[input] Value of Wire # 122 :: b2\n",
        18.78069567680359,
        48.7
    ],
    [
        "\t[input] Value of Wire # 131 :: 5e\n",
        18.82198166847229,
        48.75
    ],
    [
        "\t[input] Value of Wire # 140 :: 1f\n",
        18.862716674804688,
        48.79
    ],
    [
        "\t[input] Value of Wire # 149 :: b7\n",
        18.913936853408813,
        48.94
    ],
    [
        "\t[input] Value of Wire # 158 :: 92\n",
        18.99987292289734,
        49.61
    ],
    [
        "\t[input] Value of Wire # 167 :: 9f\n",
        19.043246746063232,
        49.79
    ],
    [
        "\t[input] Value of Wire # 176 :: 37\n",
        19.08056330680847,
        49.92
    ],
    [
        "\t[input] Value of Wire # 185 :: 6b\n",
        19.121246576309204,
        50.11
    ],
    [
        "\t[input] Value of Wire # 194 :: 74\n",
        19.159679412841797,
        50.28
    ],
    [
        "\t[input] Value of Wire # 203 :: bb\n",
        19.1995050907135,
        50.489999999999995
    ],
    [
        "\t[input] Value of Wire # 212 :: 39\n",
        19.244551420211792,
        50.8
    ],
    [
        "\t[input] Value of Wire # 221 :: 5\n",
        19.290752172470093,
        51.13
    ],
    [
        "\t[input] Value of Wire # 230 :: 2b\n",
        19.337632656097412,
        51.39
    ],
    [
        "\t[input] Value of Wire # 239 :: 43\n",
        19.38191318511963,
        51.61
    ],
    [
        "\t[input] Value of Wire # 248 :: 1d\n",
        19.42699646949768,
        51.839999999999996
    ],
    [
        "\t[input] Value of Wire # 257 :: 93\n",
        19.469561338424683,
        52.0
    ],
    [
        "\t[input] Value of Wire # 266 :: a9\n",
        19.511255025863647,
        52.18
    ],
    [
        "\t[input] Value of Wire # 275 :: b7\n",
        19.552935361862183,
        52.339999999999996
    ],
    [
        "\t[input] Value of Wire # 284 :: f2\n",
        19.592782258987427,
        52.48
    ],
    [
        "\t[input] Value of Wire # 293 :: cb\n",
        19.631246328353882,
        52.61
    ],
    [
        "\t[input] Value of Wire # 302 :: 99\n",
        19.669567108154297,
        52.970000000000006
    ],
    [
        "\t[input] Value of Wire # 311 :: cf\n",
        19.74606966972351,
        52.970000000000006
    ],
    [
        "\t[input] Value of Wire # 320 :: a3\n",
        19.7857027053833,
        53.120000000000005
    ],
    [
        "\t[input] Value of Wire # 329 :: 2f\n",
        19.82236933708191,
        53.17
    ],
    [
        "\t[input] Value of Wire # 338 :: d4\n",
        19.860090017318726,
        53.26
    ],
    [
        "\t[input] Value of Wire # 347 :: 0\n",
        19.898701667785645,
        53.37
    ],
    [
        "\t[input] Value of Wire # 356 :: 0\n",
        19.934453010559082,
        53.39
    ],
    [
        "\t[input] Value of Wire # 365 :: 0\n",
        19.969751596450806,
        53.4
    ],
    [
        "\t[input] Value of Wire # 374 :: 0\n",
        20.004984855651855,
        53.410000000000004
    ],
    [
        "\t[input] Value of Wire # 383 :: 0\n",
        20.039339065551758,
        53.42
    ],
    [
        "\t[input] Value of Wire # 392 :: 0\n",
        20.074768543243408,
        53.43
    ],
    [
        "\t[input] Value of Wire # 401 :: 0\n",
        20.109809160232544,
        53.44
    ],
    [
        "\t[input] Value of Wire # 410 :: 0\n",
        20.146045923233032,
        53.46
    ],
    [
        "\t[input] Value of Wire # 419 :: 0\n",
        20.184986352920532,
        53.55
    ],
    [
        "\t[input] Value of Wire # 428 :: 0\n",
        20.224393844604492,
        53.67
    ],
    [
        "\t[input] Value of Wire # 437 :: 0\n",
        20.26346254348755,
        53.79
    ],
    [
        "\t[input] Value of Wire # 446 :: 0\n",
        20.30229926109314,
        53.91
    ],
    [
        "\t[input] Value of Wire # 455 :: 0\n",
        20.34080410003662,
        54.03
    ],
    [
        "\t[input] Value of Wire # 464 :: 0\n",
        20.380289793014526,
        54.15
    ],
    [
        "\t[input] Value of Wire # 473 :: 0\n",
        20.419513940811157,
        54.269999999999996
    ],
    [
        "\t[input] Value of Wire # 482 :: 0\n",
        20.458146333694458,
        54.379999999999995
    ],
    [
        "\t[input] Value of Wire # 491 :: 0\n",
        20.497490882873535,
        54.51
    ],
    [
        "\t[input] Value of Wire # 500 :: 0\n",
        20.53519058227539,
        54.57
    ],
    [
        "\t[input] Value of Wire # 509 :: 0\n",
        20.575896739959717,
        54.699999999999996
    ],
    [
        "\t[input] Value of Wire # 518 :: 0\n",
        20.61781120300293,
        54.86
    ],
    [
        "Done",
        20.857974767684937,
        54.989999999999995
    ]
]