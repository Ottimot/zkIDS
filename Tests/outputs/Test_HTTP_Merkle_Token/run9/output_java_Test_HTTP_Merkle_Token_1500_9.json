[
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_Merkle_Token >\n",
        0.024116039276123047,
        0.01
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        0.507939338684082,
        2.07
    ],
    [
        "Num of variable reads = 1480\n",
        0.5137012004852295,
        2.1
    ],
    [
        "Num of conditional writes = 0\n",
        0.5184359550476074,
        2.12
    ],
    [
        "Num of words per element = 1\n",
        0.5227463245391846,
        2.1399999999999997
    ],
    [
        "Num of variable writes = 0\n",
        0.5265264511108398,
        2.1599999999999997
    ],
    [
        "num of accesses = 1480\n",
        0.5300779342651367,
        2.17
    ],
    [
        "Packing Option = 1\n",
        0.5334594249725342,
        2.19
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        0.5367474555969238,
        2.19
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        0.5396401882171631,
        2.1999999999999997
    ],
    [
        "done with read only memory solutions!\n",
        1.134305477142334,
        3.24
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.1439363956451416,
        3.25
    ],
    [
        "Num of variable reads = 128\n",
        1.1513102054595947,
        3.2600000000000002
    ],
    [
        "Num of conditional writes = 0\n",
        1.1581859588623047,
        3.27
    ],
    [
        "Num of words per element = 1\n",
        1.16485595703125,
        3.27
    ],
    [
        "Num of variable writes = 0\n",
        1.1714136600494385,
        3.2800000000000002
    ],
    [
        "num of accesses = 128\n",
        1.1780266761779785,
        3.29
    ],
    [
        "Packing Option = 1\n",
        1.1847364902496338,
        3.29
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.1911814212799072,
        3.3000000000000003
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.198493480682373,
        3.3200000000000003
    ],
    [
        "Num of variable reads = 520\n",
        1.2059752941131592,
        3.3200000000000003
    ],
    [
        "Num of conditional writes = 0\n",
        1.2131495475769043,
        3.33
    ],
    [
        "Num of words per element = 1\n",
        1.2200393676757812,
        3.3400000000000003
    ],
    [
        "Num of variable writes = 0\n",
        1.22682785987854,
        3.3400000000000003
    ],
    [
        "num of accesses = 520\n",
        1.2333698272705078,
        3.35
    ],
    [
        "Packing Option = 1\n",
        1.239802598953247,
        3.3600000000000003
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.2459256649017334,
        3.3600000000000003
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.2519807815551758,
        3.37
    ],
    [
        "done with read only memory solutions!\n",
        1.6234869956970215,
        3.7800000000000002
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6333086490631104,
        3.79
    ],
    [
        "Num of variable reads = 128\n",
        1.6405954360961914,
        3.8000000000000003
    ],
    [
        "Num of conditional writes = 0\n",
        1.647026777267456,
        3.81
    ],
    [
        "Num of words per element = 1\n",
        1.6529488563537598,
        3.81
    ],
    [
        "Num of variable writes = 0\n",
        1.6588482856750488,
        3.8200000000000003
    ],
    [
        "num of accesses = 128\n",
        1.6648037433624268,
        3.8200000000000003
    ],
    [
        "Packing Option = 1\n",
        1.67071533203125,
        3.83
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.6766138076782227,
        3.83
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6825945377349854,
        3.8400000000000003
    ],
    [
        "Num of variable reads = 71\n",
        1.6885759830474854,
        3.85
    ],
    [
        "Num of conditional writes = 0\n",
        1.6946351528167725,
        3.85
    ],
    [
        "Num of words per element = 1\n",
        1.700674057006836,
        3.8600000000000003
    ],
    [
        "Num of variable writes = 0\n",
        1.706662654876709,
        3.87
    ],
    [
        "num of accesses = 71\n",
        1.7126736640930176,
        3.87
    ],
    [
        "Packing Option = 1\n",
        1.7187035083770752,
        3.8800000000000003
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.7264022827148438,
        3.89
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.733550786972046,
        3.9000000000000004
    ],
    [
        "Num of variable reads = 128\n",
        1.740396499633789,
        3.91
    ],
    [
        "Num of conditional writes = 0\n",
        1.7470769882202148,
        3.91
    ],
    [
        "Num of words per element = 1\n",
        1.7535710334777832,
        3.9200000000000004
    ],
    [
        "Num of variable writes = 0\n",
        1.7599196434020996,
        3.93
    ],
    [
        "num of accesses = 128\n",
        1.7661256790161133,
        3.93
    ],
    [
        "Packing Option = 0\n",
        1.7722301483154297,
        3.9400000000000004
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.7783329486846924,
        3.95
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.784395694732666,
        3.95
    ],
    [
        "Num of variable reads = 71\n",
        1.7905025482177734,
        3.9600000000000004
    ],
    [
        "Num of conditional writes = 0\n",
        1.7965450286865234,
        3.9600000000000004
    ],
    [
        "Num of words per element = 1\n",
        1.8025176525115967,
        3.97
    ],
    [
        "Num of variable writes = 0\n",
        1.8084640502929688,
        3.97
    ],
    [
        "num of accesses = 71\n",
        1.8144469261169434,
        3.98
    ],
    [
        "Packing Option = 1\n",
        1.8204193115234375,
        3.99
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.82635498046875,
        3.99
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.832366943359375,
        4.0
    ],
    [
        "Num of variable reads = 128\n",
        1.8387606143951416,
        4.01
    ],
    [
        "Num of conditional writes = 0\n",
        1.8459045886993408,
        4.02
    ],
    [
        "Num of words per element = 1\n",
        1.8539156913757324,
        4.05
    ],
    [
        "Num of variable writes = 0\n",
        1.8618721961975098,
        4.06
    ],
    [
        "num of accesses = 128\n",
        1.869499683380127,
        4.08
    ],
    [
        "Packing Option = 0\n",
        1.8769755363464355,
        4.09
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.884669542312622,
        4.09
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.8916912078857422,
        4.1
    ],
    [
        "Num of variable reads = 0\n",
        1.8983891010284424,
        4.11
    ],
    [
        "Num of conditional writes = 0\n",
        1.9049971103668213,
        4.12
    ],
    [
        "Num of words per element = 1\n",
        1.9115207195281982,
        4.13
    ],
    [
        "Num of variable writes = 0\n",
        1.918459177017212,
        4.15
    ],
    [
        "num of accesses = 0\n",
        1.9253456592559814,
        4.16
    ],
    [
        "Packing Option = 0\n",
        1.9321935176849365,
        4.17
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        1.9387974739074707,
        4.18
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.945251703262329,
        4.18
    ],
    [
        "Num of variable reads = 15080\n",
        1.9514710903167725,
        4.19
    ],
    [
        "Num of conditional writes = 0\n",
        1.95758056640625,
        4.2
    ],
    [
        "Num of words per element = 1\n",
        1.9636213779449463,
        4.2
    ],
    [
        "Num of variable writes = 0\n",
        1.9696297645568848,
        4.21
    ],
    [
        "num of accesses = 15080\n",
        1.9756355285644531,
        4.21
    ],
    [
        "Packing Option = 1\n",
        1.9820890426635742,
        4.2299999999999995
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.9898278713226318,
        4.239999999999999
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.9981498718261719,
        4.25
    ],
    [
        "done with read only memory solutions!\n",
        2.115107774734497,
        4.5
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.1242563724517822,
        4.5
    ],
    [
        "Num of variable reads = 5\n",
        2.1316661834716797,
        4.52
    ],
    [
        "Num of conditional writes = 0\n",
        2.138718366622925,
        4.56
    ],
    [
        "Num of words per element = 1\n",
        2.145538806915283,
        4.569999999999999
    ],
    [
        "Num of variable writes = 0\n",
        2.1523048877716064,
        4.59
    ],
    [
        "num of accesses = 5\n",
        2.1590089797973633,
        4.62
    ],
    [
        "Packing Option = 1\n",
        2.165905475616455,
        4.64
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.17317533493042,
        4.66
    ],
    [
        "Phase 1: Analysis Completed!\n",
        2.180783271789551,
        4.7
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_Merkle_Token >\n",
        2.1879334449768066,
        4.72
    ],
    [
        "Circuit Generation Done for < Test_HTTP_Merkle_Token >  \n",
        6.660921096801758,
        30.36
    ],
    [
        " \t Total Number of Constraints :  2539752\n",
        6.679300308227539,
        30.470000000000002
    ],
    [
        "\n",
        6.700968265533447,
        30.56
    ],
    [
        "Instruction queue size: 11500133\n",
        6.724558115005493,
        30.71
    ],
    [
        "Normal execution\n",
        16.84692883491516,
        43.92
    ],
    [
        "Running Sample Run: run15001\n",
        16.86663818359375,
        43.949999999999996
    ],
    [
        "tls_data.txt\n",
        16.88192319869995,
        43.949999999999996
    ],
    [
        "merkle_data.txt\n",
        16.897453546524048,
        43.97
    ],
    [
        "asdfghc\n",
        16.913434982299805,
        44.01
    ],
    [
        "97\n",
        16.93012285232544,
        44.07
    ],
    [
        "115\n",
        16.94761085510254,
        44.129999999999995
    ],
    [
        "100\n",
        16.966614246368408,
        44.18
    ],
    [
        "102\n",
        16.983910083770752,
        44.21
    ],
    [
        "103\n",
        17.002691507339478,
        44.26
    ],
    [
        "7\n",
        17.020978450775146,
        44.269999999999996
    ],
    [
        "Evaluating Input on the circuit \n",
        17.039257049560547,
        44.29
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        17.057485580444336,
        44.32
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        17.075568675994873,
        44.33
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        17.094164848327637,
        44.35
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        17.113419771194458,
        44.379999999999995
    ],
    [
        "\t[input] Value of Wire # 21 :: 7\n",
        17.131912231445312,
        44.39
    ],
    [
        "\t[input] Value of Wire # 22 :: 297ca9c14951fbaad217dc76566893385ae3ed90b54baf41c6ba205e35a0b646\n",
        17.15024423599243,
        44.41
    ],
    [
        "\t[input] Value of Wire # 23 :: e3\n",
        17.168508291244507,
        44.43
    ],
    [
        "\t[input] Value of Wire # 32 :: bf\n",
        17.187305688858032,
        44.449999999999996
    ],
    [
        "\t[input] Value of Wire # 41 :: a4\n",
        17.20742106437683,
        44.51
    ],
    [
        "\t[input] Value of Wire # 50 :: 1\n",
        17.22800040245056,
        44.57
    ],
    [
        "\t[input] Value of Wire # 59 :: a4\n",
        17.24910283088684,
        44.629999999999995
    ],
    [
        "\t[input] Value of Wire # 68 :: 40\n",
        17.269931077957153,
        44.669999999999995
    ],
    [
        "\t[input] Value of Wire # 77 :: ed\n",
        17.290526866912842,
        44.71
    ],
    [
        "\t[input] Value of Wire # 86 :: 41\n",
        17.310213327407837,
        44.75
    ],
    [
        "\t[input] Value of Wire # 95 :: f\n",
        17.329053163528442,
        44.76
    ],
    [
        "\t[input] Value of Wire # 104 :: 3b\n",
        17.348374366760254,
        44.78
    ],
    [
        "\t[input] Value of Wire # 113 :: d0\n",
        17.374491214752197,
        44.82
    ],
    [
        "\t[input] Value of Wire # 122 :: b2\n",
        17.39399790763855,
        44.839999999999996
    ],
    [
        "\t[input] Value of Wire # 131 :: 5e\n",
        17.413082599639893,
        44.85
    ],
    [
        "\t[input] Value of Wire # 140 :: 1f\n",
        17.433656692504883,
        44.879999999999995
    ],
    [
        "\t[input] Value of Wire # 149 :: b7\n",
        17.452962160110474,
        44.9
    ],
    [
        "\t[input] Value of Wire # 158 :: 92\n",
        17.472697496414185,
        44.919999999999995
    ],
    [
        "\t[input] Value of Wire # 167 :: 9f\n",
        17.49191117286682,
        44.94
    ],
    [
        "\t[input] Value of Wire # 176 :: 37\n",
        17.511730194091797,
        44.96
    ],
    [
        "\t[input] Value of Wire # 185 :: 6b\n",
        17.55042266845703,
        45.239999999999995
    ],
    [
        "\t[input] Value of Wire # 194 :: 74\n",
        17.614341259002686,
        45.88
    ],
    [
        "\t[input] Value of Wire # 203 :: bb\n",
        17.637995719909668,
        45.980000000000004
    ],
    [
        "\t[input] Value of Wire # 212 :: 39\n",
        17.655109405517578,
        46.0
    ],
    [
        "\t[input] Value of Wire # 221 :: 5\n",
        17.672163486480713,
        46.02
    ],
    [
        "\t[input] Value of Wire # 230 :: 2b\n",
        17.689188957214355,
        46.04
    ],
    [
        "\t[input] Value of Wire # 239 :: 43\n",
        17.706637859344482,
        46.05
    ],
    [
        "\t[input] Value of Wire # 248 :: 1d\n",
        17.724056005477905,
        46.07
    ],
    [
        "\t[input] Value of Wire # 257 :: 93\n",
        17.743205785751343,
        46.089999999999996
    ],
    [
        "\t[input] Value of Wire # 266 :: a9\n",
        17.762549877166748,
        46.12
    ],
    [
        "\t[input] Value of Wire # 275 :: b7\n",
        17.78161883354187,
        46.14
    ],
    [
        "\t[input] Value of Wire # 284 :: f2\n",
        17.81281018257141,
        46.260000000000005
    ],
    [
        "\t[input] Value of Wire # 293 :: cb\n",
        17.870259523391724,
        46.760000000000005
    ],
    [
        "\t[input] Value of Wire # 302 :: 99\n",
        17.89061737060547,
        46.84
    ],
    [
        "\t[input] Value of Wire # 311 :: cf\n",
        17.911366939544678,
        46.92
    ],
    [
        "\t[input] Value of Wire # 320 :: a3\n",
        17.932918787002563,
        47.0
    ],
    [
        "\t[input] Value of Wire # 329 :: 2f\n",
        17.971656560897827,
        47.290000000000006
    ],
    [
        "\t[input] Value of Wire # 338 :: d4\n",
        17.992379426956177,
        47.370000000000005
    ],
    [
        "\t[input] Value of Wire # 347 :: 0\n",
        18.01338791847229,
        47.45
    ],
    [
        "\t[input] Value of Wire # 356 :: 0\n",
        18.034910917282104,
        47.540000000000006
    ],
    [
        "\t[input] Value of Wire # 365 :: 0\n",
        18.073151350021362,
        47.800000000000004
    ],
    [
        "\t[input] Value of Wire # 374 :: 0\n",
        18.09410047531128,
        47.89
    ],
    [
        "\t[input] Value of Wire # 383 :: 0\n",
        18.11497449874878,
        47.970000000000006
    ],
    [
        "\t[input] Value of Wire # 392 :: 0\n",
        18.13591766357422,
        48.06
    ],
    [
        "\t[input] Value of Wire # 401 :: 0\n",
        18.153807401657104,
        48.13
    ],
    [
        "\t[input] Value of Wire # 410 :: 0\n",
        18.177664041519165,
        48.25
    ],
    [
        "\t[input] Value of Wire # 419 :: 0\n",
        18.204461812973022,
        48.36
    ],
    [
        "\t[input] Value of Wire # 428 :: 0\n",
        18.232162475585938,
        48.53
    ],
    [
        "\t[input] Value of Wire # 437 :: 0\n",
        18.253894567489624,
        48.67
    ],
    [
        "\t[input] Value of Wire # 446 :: 0\n",
        18.27689290046692,
        48.800000000000004
    ],
    [
        "\t[input] Value of Wire # 455 :: 0\n",
        18.29778528213501,
        48.93
    ],
    [
        "\t[input] Value of Wire # 464 :: 0\n",
        18.319113969802856,
        49.03
    ],
    [
        "\t[input] Value of Wire # 473 :: 0\n",
        18.34071922302246,
        49.13
    ],
    [
        "\t[input] Value of Wire # 482 :: 0\n",
        18.36248755455017,
        49.41
    ],
    [
        "\t[input] Value of Wire # 491 :: 0\n",
        18.400973796844482,
        49.41
    ],
    [
        "\t[input] Value of Wire # 500 :: 0\n",
        18.42070984840393,
        49.49
    ],
    [
        "\t[input] Value of Wire # 509 :: 0\n",
        18.439919233322144,
        49.58
    ],
    [
        "\t[input] Value of Wire # 518 :: 0\n",
        18.459162712097168,
        49.66
    ],
    [
        "\t[input] Value of Wire # 527 :: 0\n",
        18.478294849395752,
        49.739999999999995
    ],
    [
        "\t[input] Value of Wire # 536 :: 0\n",
        18.49747610092163,
        49.83
    ],
    [
        "\t[input] Value of Wire # 545 :: 0\n",
        18.518187522888184,
        49.93
    ],
    [
        "\t[input] Value of Wire # 554 :: 0\n",
        18.537264823913574,
        49.989999999999995
    ],
    [
        "\t[input] Value of Wire # 563 :: 0\n",
        18.55647325515747,
        50.07
    ],
    [
        "\t[input] Value of Wire # 572 :: 0\n",
        18.592400550842285,
        50.349999999999994
    ],
    [
        "\t[input] Value of Wire # 581 :: 0\n",
        18.61130714416504,
        50.43
    ],
    [
        "\t[input] Value of Wire # 590 :: 0\n",
        18.62883162498474,
        50.48
    ],
    [
        "\t[input] Value of Wire # 599 :: 0\n",
        18.646843910217285,
        50.54
    ],
    [
        "\t[input] Value of Wire # 608 :: 0\n",
        18.66430687904358,
        50.58
    ],
    [
        "\t[input] Value of Wire # 617 :: 0\n",
        18.68156123161316,
        50.64
    ],
    [
        "\t[input] Value of Wire # 626 :: 0\n",
        18.69879651069641,
        50.69
    ],
    [
        "\t[input] Value of Wire # 635 :: 0\n",
        18.715455770492554,
        50.71
    ],
    [
        "\t[input] Value of Wire # 644 :: 0\n",
        18.733001947402954,
        50.75
    ],
    [
        "\t[input] Value of Wire # 653 :: 0\n",
        18.750359058380127,
        50.8
    ],
    [
        "\t[input] Value of Wire # 662 :: 0\n",
        18.76742959022522,
        50.82
    ],
    [
        "\t[input] Value of Wire # 671 :: 0\n",
        18.786439657211304,
        50.87
    ],
    [
        "\t[input] Value of Wire # 680 :: 0\n",
        18.805602073669434,
        50.93
    ],
    [
        "\t[input] Value of Wire # 689 :: 0\n",
        18.823590755462646,
        50.970000000000006
    ],
    [
        "\t[input] Value of Wire # 698 :: 0\n",
        18.842337608337402,
        51.03
    ],
    [
        "\t[input] Value of Wire # 707 :: 0\n",
        18.860716581344604,
        51.080000000000005
    ],
    [
        "\t[input] Value of Wire # 716 :: 0\n",
        18.878530025482178,
        51.14
    ],
    [
        "\t[input] Value of Wire # 725 :: 0\n",
        18.89623260498047,
        51.190000000000005
    ],
    [
        "\t[input] Value of Wire # 734 :: 0\n",
        18.914172172546387,
        51.25
    ],
    [
        "\t[input] Value of Wire # 743 :: 0\n",
        18.931876182556152,
        51.300000000000004
    ],
    [
        "\t[input] Value of Wire # 752 :: 0\n",
        18.94947862625122,
        51.36
    ],
    [
        "\t[input] Value of Wire # 761 :: 0\n",
        18.96752166748047,
        51.410000000000004
    ],
    [
        "\t[input] Value of Wire # 770 :: 0\n",
        18.984923839569092,
        51.45
    ],
    [
        "\t[input] Value of Wire # 779 :: 0\n",
        19.002727270126343,
        51.510000000000005
    ],
    [
        "\t[input] Value of Wire # 788 :: 0\n",
        19.021635055541992,
        51.57
    ],
    [
        "\t[input] Value of Wire # 797 :: 0\n",
        19.040294647216797,
        51.620000000000005
    ],
    [
        "\t[input] Value of Wire # 806 :: 0\n",
        19.05885100364685,
        51.68
    ],
    [
        "\t[input] Value of Wire # 815 :: 0\n",
        19.076887369155884,
        51.730000000000004
    ],
    [
        "\t[input] Value of Wire # 824 :: 0\n",
        19.09461808204651,
        51.79
    ],
    [
        "\t[input] Value of Wire # 833 :: 0\n",
        19.112777709960938,
        51.84
    ],
    [
        "\t[input] Value of Wire # 842 :: 0\n",
        19.131815195083618,
        51.900000000000006
    ],
    [
        "\t[input] Value of Wire # 851 :: 0\n",
        19.148345708847046,
        51.910000000000004
    ],
    [
        "\t[input] Value of Wire # 860 :: 0\n",
        19.16488742828369,
        51.940000000000005
    ],
    [
        "\t[input] Value of Wire # 869 :: 0\n",
        19.181241273880005,
        51.96
    ],
    [
        "\t[input] Value of Wire # 878 :: 0\n",
        19.196857452392578,
        51.970000000000006
    ],
    [
        "\t[input] Value of Wire # 887 :: 0\n",
        19.214296579360962,
        52.02
    ],
    [
        "\t[input] Value of Wire # 896 :: 0\n",
        19.232017993927002,
        52.07
    ],
    [
        "\t[input] Value of Wire # 905 :: 0\n",
        19.249812364578247,
        52.13
    ],
    [
        "\t[input] Value of Wire # 914 :: 0\n",
        19.267622470855713,
        52.18
    ],
    [
        "\t[input] Value of Wire # 923 :: 0\n",
        19.285404443740845,
        52.230000000000004
    ],
    [
        "Done",
        19.431591749191284,
        52.29
    ]
]