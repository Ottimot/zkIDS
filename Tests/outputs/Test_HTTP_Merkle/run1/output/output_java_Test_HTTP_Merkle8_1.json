[
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_Merkle >\n",
        1.004086971282959
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6564977169036865
    ],
    [
        "Num of variable reads = 1480\n",
        1.665900707244873
    ],
    [
        "Num of conditional writes = 0\n",
        1.6761565208435059
    ],
    [
        "Num of words per element = 1\n",
        1.6839497089385986
    ],
    [
        "Num of variable writes = 0\n",
        1.6947846412658691
    ],
    [
        "num of accesses = 1480\n",
        1.7053050994873047
    ],
    [
        "Packing Option = 1\n",
        1.715149164199829
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.7259013652801514
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.736180305480957
    ],
    [
        "done with read only memory solutions!\n",
        2.7662580013275146
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.7844231128692627
    ],
    [
        "Num of variable reads = 128\n",
        2.7987875938415527
    ],
    [
        "Num of conditional writes = 0\n",
        2.8126566410064697
    ],
    [
        "Num of words per element = 1\n",
        2.8289475440979004
    ],
    [
        "Num of variable writes = 0\n",
        2.843696355819702
    ],
    [
        "num of accesses = 128\n",
        2.858299970626831
    ],
    [
        "Packing Option = 1\n",
        2.8734428882598877
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.888388156890869
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.90328311920166
    ],
    [
        "Num of variable reads = 520\n",
        2.9181149005889893
    ],
    [
        "Num of conditional writes = 0\n",
        2.9335403442382812
    ],
    [
        "Num of words per element = 1\n",
        2.9483230113983154
    ],
    [
        "Num of variable writes = 0\n",
        2.963768482208252
    ],
    [
        "num of accesses = 520\n",
        2.978623390197754
    ],
    [
        "Packing Option = 1\n",
        2.9940972328186035
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        3.0097410678863525
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        3.0253920555114746
    ],
    [
        "done with read only memory solutions!\n",
        3.5629701614379883
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.583375930786133
    ],
    [
        "Num of variable reads = 128\n",
        3.6035826206207275
    ],
    [
        "Num of conditional writes = 0\n",
        3.6227502822875977
    ],
    [
        "Num of words per element = 1\n",
        3.6372311115264893
    ],
    [
        "Num of variable writes = 0\n",
        3.6512458324432373
    ],
    [
        "num of accesses = 128\n",
        3.666034460067749
    ],
    [
        "Packing Option = 1\n",
        3.680382251739502
    ],
    [
        "Decision: Using Network mode for this memory\n",
        3.695786952972412
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.710430145263672
    ],
    [
        "Num of variable reads = 71\n",
        3.726010799407959
    ],
    [
        "Num of conditional writes = 0\n",
        3.740713119506836
    ],
    [
        "Num of words per element = 1\n",
        3.7565622329711914
    ],
    [
        "Num of variable writes = 0\n",
        3.771230697631836
    ],
    [
        "num of accesses = 71\n",
        3.787093162536621
    ],
    [
        "Packing Option = 1\n",
        3.801910638809204
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        3.817711591720581
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.8324716091156006
    ],
    [
        "Num of variable reads = 128\n",
        3.851179838180542
    ],
    [
        "Num of conditional writes = 0\n",
        3.8667516708374023
    ],
    [
        "Num of words per element = 1\n",
        3.8821210861206055
    ],
    [
        "Num of variable writes = 0\n",
        3.8975422382354736
    ],
    [
        "num of accesses = 128\n",
        3.9123480319976807
    ],
    [
        "Packing Option = 0\n",
        3.927255392074585
    ],
    [
        "Decision: Using Network mode for this memory\n",
        3.94222354888916
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.9569382667541504
    ],
    [
        "Num of variable reads = 71\n",
        3.9725100994110107
    ],
    [
        "Num of conditional writes = 0\n",
        3.987722873687744
    ],
    [
        "Num of words per element = 1\n",
        4.003376722335815
    ],
    [
        "Num of variable writes = 0\n",
        4.0190582275390625
    ],
    [
        "num of accesses = 71\n",
        4.035090208053589
    ],
    [
        "Packing Option = 1\n",
        4.050115346908569
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        4.065754175186157
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        4.080958127975464
    ],
    [
        "Num of variable reads = 128\n",
        4.096515417098999
    ],
    [
        "Num of conditional writes = 0\n",
        4.11175012588501
    ],
    [
        "Num of words per element = 1\n",
        4.127110719680786
    ],
    [
        "Num of variable writes = 0\n",
        4.142017841339111
    ],
    [
        "num of accesses = 128\n",
        4.157585144042969
    ],
    [
        "Packing Option = 0\n",
        4.1757426261901855
    ],
    [
        "Decision: Using Network mode for this memory\n",
        4.190622329711914
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        4.205571889877319
    ],
    [
        "Num of variable reads = 0\n",
        4.221076488494873
    ],
    [
        "Num of conditional writes = 0\n",
        4.236214637756348
    ],
    [
        "Num of words per element = 1\n",
        4.251664161682129
    ],
    [
        "Num of variable writes = 0\n",
        4.266849994659424
    ],
    [
        "num of accesses = 0\n",
        4.282432556152344
    ],
    [
        "Packing Option = 0\n",
        4.298102617263794
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        4.3127100467681885
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        4.327917814254761
    ],
    [
        "Num of variable reads = 5160\n",
        4.342758417129517
    ],
    [
        "Num of conditional writes = 0\n",
        4.357797861099243
    ],
    [
        "Num of words per element = 1\n",
        4.373316526412964
    ],
    [
        "Num of variable writes = 0\n",
        4.3884570598602295
    ],
    [
        "num of accesses = 5160\n",
        4.404225587844849
    ],
    [
        "Packing Option = 1\n",
        4.419564723968506
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        4.435152530670166
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        4.4498350620269775
    ],
    [
        "done with read only memory solutions!\n",
        4.49036169052124
    ],
    [
        "Phase 1: Analysis Completed!\n",
        4.506563186645508
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_Merkle >\n",
        4.524415493011475
    ],
    [
        "Circuit Generation Done for < Test_HTTP_Merkle >  \n",
        9.49110221862793
    ],
    [
        " \t Total Number of Constraints :  1783755\n",
        9.515325784683228
    ],
    [
        "\n",
        9.537970304489136
    ],
    [
        "Instruction queue size: 5725362\n",
        9.56123423576355
    ],
    [
        "Normal execution\n",
        17.846595525741577
    ],
    [
        "Running Sample Run: run81\n",
        17.875687837600708
    ],
    [
        "tls_data.txt\n",
        17.903788089752197
    ],
    [
        "files/proof_8.txt\n",
        17.931512355804443
    ],
    [
        "Url assignment done\n",
        17.961819410324097
    ],
    [
        "Evaluating Input on the circuit \n",
        17.988384246826172
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        18.015729188919067
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        18.054404973983765
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        18.087276697158813
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        18.12263822555542
    ],
    [
        "\t[input] Value of Wire # 21 :: 6\n",
        18.150371074676514
    ],
    [
        "\t[input] Value of Wire # 22 :: 2d087913144047d7618b32685474fe07243e8839eb3b4a337e6d90296de84974\n",
        18.175991535186768
    ],
    [
        "\t[input] Value of Wire # 23 :: e3\n",
        18.20347499847412
    ],
    [
        "\t[input] Value of Wire # 32 :: bf\n",
        18.23158836364746
    ],
    [
        "\t[input] Value of Wire # 41 :: a4\n",
        18.259779691696167
    ],
    [
        "\t[input] Value of Wire # 50 :: 1\n",
        18.28780484199524
    ],
    [
        "\t[input] Value of Wire # 59 :: a4\n",
        18.31580424308777
    ],
    [
        "\t[input] Value of Wire # 68 :: 40\n",
        18.342892169952393
    ],
    [
        "\t[input] Value of Wire # 77 :: ed\n",
        18.369460582733154
    ],
    [
        "\t[input] Value of Wire # 86 :: 41\n",
        18.39545726776123
    ],
    [
        "\t[input] Value of Wire # 95 :: f\n",
        18.422312021255493
    ],
    [
        "\t[input] Value of Wire # 104 :: 3b\n",
        18.449981451034546
    ],
    [
        "\t[input] Value of Wire # 113 :: d0\n",
        18.477152347564697
    ],
    [
        "\t[input] Value of Wire # 122 :: b2\n",
        18.50384521484375
    ],
    [
        "\t[input] Value of Wire # 131 :: 5e\n",
        18.53952169418335
    ],
    [
        "\t[input] Value of Wire # 140 :: 1f\n",
        18.589961051940918
    ],
    [
        "\t[input] Value of Wire # 149 :: b7\n",
        18.61596918106079
    ],
    [
        "\t[input] Value of Wire # 158 :: 92\n",
        18.642430067062378
    ],
    [
        "\t[input] Value of Wire # 167 :: 9f\n",
        18.679280757904053
    ],
    [
        "\t[input] Value of Wire # 176 :: 37\n",
        18.708624124526978
    ],
    [
        "\t[input] Value of Wire # 185 :: 6b\n",
        18.760424852371216
    ],
    [
        "\t[input] Value of Wire # 194 :: 74\n",
        18.80464768409729
    ],
    [
        "\t[input] Value of Wire # 203 :: bb\n",
        18.831578493118286
    ],
    [
        "\t[input] Value of Wire # 212 :: 39\n",
        18.863898992538452
    ],
    [
        "\t[input] Value of Wire # 221 :: 5\n",
        18.889609813690186
    ],
    [
        "\t[input] Value of Wire # 230 :: 2b\n",
        18.931730031967163
    ],
    [
        "\t[input] Value of Wire # 239 :: 43\n",
        18.9580557346344
    ],
    [
        "\t[input] Value of Wire # 248 :: 1d\n",
        18.984797477722168
    ],
    [
        "\t[input] Value of Wire # 257 :: 93\n",
        19.01153874397278
    ],
    [
        "\t[input] Value of Wire # 266 :: a9\n",
        19.03799057006836
    ],
    [
        "\t[input] Value of Wire # 275 :: b7\n",
        19.065101146697998
    ],
    [
        "\t[input] Value of Wire # 284 :: f2\n",
        19.0933940410614
    ],
    [
        "\t[input] Value of Wire # 293 :: cb\n",
        19.120093822479248
    ],
    [
        "\t[input] Value of Wire # 302 :: 99\n",
        19.145456790924072
    ],
    [
        "\t[input] Value of Wire # 311 :: cf\n",
        19.17218279838562
    ],
    [
        "\t[input] Value of Wire # 320 :: a3\n",
        19.201367139816284
    ],
    [
        "\t[input] Value of Wire # 329 :: 2f\n",
        19.23132634162903
    ],
    [
        "\t[input] Value of Wire # 338 :: d4\n",
        19.261619806289673
    ],
    [
        "\t[input] Value of Wire # 347 :: 0\n",
        19.294891834259033
    ],
    [
        "Done",
        19.51812744140625
    ]
]