[
    [
        "700\n",
        0.25169801712036133
    ],
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_String >\n",
        0.25382304191589355
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        0.6740360260009766
    ],
    [
        "Num of variable reads = 1480\n",
        0.6822166442871094
    ],
    [
        "Num of conditional writes = 0\n",
        0.6903085708618164
    ],
    [
        "Num of words per element = 1\n",
        0.6991591453552246
    ],
    [
        "Num of variable writes = 0\n",
        0.7081122398376465
    ],
    [
        "num of accesses = 1480\n",
        0.7169561386108398
    ],
    [
        "Packing Option = 1\n",
        0.7258944511413574
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        0.7352268695831299
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        0.7464907169342041
    ],
    [
        "done with read only memory solutions!\n",
        1.6442070007324219
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.652106523513794
    ],
    [
        "Num of variable reads = 128\n",
        1.6599128246307373
    ],
    [
        "Num of conditional writes = 0\n",
        1.6673688888549805
    ],
    [
        "Num of words per element = 1\n",
        1.6754765510559082
    ],
    [
        "Num of variable writes = 0\n",
        1.6833178997039795
    ],
    [
        "num of accesses = 128\n",
        1.6909475326538086
    ],
    [
        "Packing Option = 1\n",
        1.6991209983825684
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.7103626728057861
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.7226970195770264
    ],
    [
        "Num of variable reads = 520\n",
        1.734130859375
    ],
    [
        "Num of conditional writes = 0\n",
        1.7462899684906006
    ],
    [
        "Num of words per element = 1\n",
        1.7580206394195557
    ],
    [
        "Num of variable writes = 0\n",
        1.7679224014282227
    ],
    [
        "num of accesses = 520\n",
        1.7757782936096191
    ],
    [
        "Packing Option = 1\n",
        1.7830803394317627
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.7903785705566406
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.7982285022735596
    ],
    [
        "done with read only memory solutions!\n",
        2.402515411376953
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.4106531143188477
    ],
    [
        "Num of variable reads = 128\n",
        2.4183640480041504
    ],
    [
        "Num of conditional writes = 0\n",
        2.426622152328491
    ],
    [
        "Num of words per element = 1\n",
        2.4343230724334717
    ],
    [
        "Num of variable writes = 0\n",
        2.4420456886291504
    ],
    [
        "num of accesses = 128\n",
        2.45047664642334
    ],
    [
        "Packing Option = 1\n",
        2.4582595825195312
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.467169761657715
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.475269317626953
    ],
    [
        "Num of variable reads = 71\n",
        2.4832444190979004
    ],
    [
        "Num of conditional writes = 0\n",
        2.4910497665405273
    ],
    [
        "Num of words per element = 1\n",
        2.500101327896118
    ],
    [
        "Num of variable writes = 0\n",
        2.508263349533081
    ],
    [
        "num of accesses = 71\n",
        2.516308546066284
    ],
    [
        "Packing Option = 1\n",
        2.5244669914245605
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.5334763526916504
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.5416462421417236
    ],
    [
        "Num of variable reads = 128\n",
        2.5496714115142822
    ],
    [
        "Num of conditional writes = 0\n",
        2.5579984188079834
    ],
    [
        "Num of words per element = 1\n",
        2.566915273666382
    ],
    [
        "Num of variable writes = 0\n",
        2.5750365257263184
    ],
    [
        "num of accesses = 128\n",
        2.5832066535949707
    ],
    [
        "Packing Option = 0\n",
        2.592571258544922
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.600755453109741
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.6086394786834717
    ],
    [
        "Num of variable reads = 71\n",
        2.616975784301758
    ],
    [
        "Num of conditional writes = 0\n",
        2.625732898712158
    ],
    [
        "Num of words per element = 1\n",
        2.633833646774292
    ],
    [
        "Num of variable writes = 0\n",
        2.6417136192321777
    ],
    [
        "num of accesses = 71\n",
        2.6501877307891846
    ],
    [
        "Packing Option = 1\n",
        2.6586427688598633
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.666750192642212
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.6745986938476562
    ],
    [
        "Num of variable reads = 128\n",
        2.6835567951202393
    ],
    [
        "Num of conditional writes = 0\n",
        2.6917855739593506
    ],
    [
        "Num of words per element = 1\n",
        2.6998584270477295
    ],
    [
        "Num of variable writes = 0\n",
        2.7079012393951416
    ],
    [
        "num of accesses = 128\n",
        2.7170817852020264
    ],
    [
        "Packing Option = 0\n",
        2.7252421379089355
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.7332653999328613
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.7413182258605957
    ],
    [
        "Num of variable reads = 0\n",
        2.75038743019104
    ],
    [
        "Num of conditional writes = 0\n",
        2.7585320472717285
    ],
    [
        "Num of words per element = 1\n",
        2.76664662361145
    ],
    [
        "Num of variable writes = 0\n",
        2.7750184535980225
    ],
    [
        "num of accesses = 0\n",
        2.7840280532836914
    ],
    [
        "Packing Option = 0\n",
        2.7921762466430664
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.8001487255096436
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.8086347579956055
    ],
    [
        "Num of variable reads = 7080\n",
        2.8175973892211914
    ],
    [
        "Num of conditional writes = 0\n",
        2.8259117603302
    ],
    [
        "Num of words per element = 1\n",
        2.834946632385254
    ],
    [
        "Num of variable writes = 0\n",
        2.8439033031463623
    ],
    [
        "num of accesses = 7080\n",
        2.8520288467407227
    ],
    [
        "Packing Option = 1\n",
        2.860250949859619
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        2.869377613067627
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        2.8776865005493164
    ],
    [
        "done with read only memory solutions!\n",
        3.2437314987182617
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.254579782485962
    ],
    [
        "Num of variable reads = 0\n",
        3.2633156776428223
    ],
    [
        "Num of conditional writes = 0\n",
        3.2716522216796875
    ],
    [
        "Num of words per element = 1\n",
        3.282806873321533
    ],
    [
        "Num of variable writes = 0\n",
        3.292804002761841
    ],
    [
        "num of accesses = 0\n",
        3.3027150630950928
    ],
    [
        "Packing Option = 1\n",
        3.3135766983032227
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        3.3233301639556885
    ],
    [
        "Phase 1: Analysis Completed!\n",
        3.3321619033813477
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_String >\n",
        3.3416194915771484
    ],
    [
        "Circuit Generation Done for < Test_HTTP_String >  \n",
        8.70234751701355
    ],
    [
        " \t Total Number of Constraints :  1914225\n",
        8.728044271469116
    ],
    [
        "\n",
        8.748418092727661
    ],
    [
        "Instruction queue size: 6535705\n",
        8.770269632339478
    ],
    [
        "Normal execution\n",
        17.591936111450195
    ],
    [
        "Running Sample Run: run7001\n",
        17.625336408615112
    ],
    [
        "Url assignment done\n",
        17.662252187728882
    ],
    [
        "Evaluating Input on the circuit \n",
        17.692100048065186
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        17.722047567367554
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        17.754027128219604
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        17.798439741134644
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        17.825905084609985
    ],
    [
        "\t[input] Value of Wire # 21 :: 9\n",
        17.853765964508057
    ],
    [
        "\t[input] Value of Wire # 22 :: e3\n",
        17.881903409957886
    ],
    [
        "\t[input] Value of Wire # 31 :: bf\n",
        17.911107063293457
    ],
    [
        "\t[input] Value of Wire # 40 :: a4\n",
        17.940335750579834
    ],
    [
        "\t[input] Value of Wire # 49 :: 1\n",
        17.969825744628906
    ],
    [
        "\t[input] Value of Wire # 58 :: a4\n",
        17.999117136001587
    ],
    [
        "\t[input] Value of Wire # 67 :: 40\n",
        18.028149843215942
    ],
    [
        "\t[input] Value of Wire # 76 :: ed\n",
        18.057434558868408
    ],
    [
        "\t[input] Value of Wire # 85 :: 41\n",
        18.086781978607178
    ],
    [
        "\t[input] Value of Wire # 94 :: f\n",
        18.116092205047607
    ],
    [
        "\t[input] Value of Wire # 103 :: 3b\n",
        18.14547061920166
    ],
    [
        "\t[input] Value of Wire # 112 :: d0\n",
        18.174818992614746
    ],
    [
        "\t[input] Value of Wire # 121 :: b2\n",
        18.204312801361084
    ],
    [
        "\t[input] Value of Wire # 130 :: 5e\n",
        18.23368763923645
    ],
    [
        "\t[input] Value of Wire # 139 :: 1f\n",
        18.26305627822876
    ],
    [
        "\t[input] Value of Wire # 148 :: b7\n",
        18.292675495147705
    ],
    [
        "\t[input] Value of Wire # 157 :: 92\n",
        18.32522749900818
    ],
    [
        "\t[input] Value of Wire # 166 :: 9f\n",
        18.368338584899902
    ],
    [
        "\t[input] Value of Wire # 175 :: 37\n",
        18.40454125404358
    ],
    [
        "\t[input] Value of Wire # 184 :: 6b\n",
        18.432507514953613
    ],
    [
        "\t[input] Value of Wire # 193 :: 74\n",
        18.46631693840027
    ],
    [
        "\t[input] Value of Wire # 202 :: bb\n",
        18.49564838409424
    ],
    [
        "\t[input] Value of Wire # 211 :: 39\n",
        18.52557682991028
    ],
    [
        "\t[input] Value of Wire # 220 :: 5\n",
        18.555713176727295
    ],
    [
        "\t[input] Value of Wire # 229 :: 2b\n",
        18.585134744644165
    ],
    [
        "\t[input] Value of Wire # 238 :: 43\n",
        18.621227741241455
    ],
    [
        "\t[input] Value of Wire # 247 :: 1d\n",
        18.68501901626587
    ],
    [
        "\t[input] Value of Wire # 256 :: 93\n",
        18.74183201789856
    ],
    [
        "\t[input] Value of Wire # 265 :: a9\n",
        18.771934270858765
    ],
    [
        "\t[input] Value of Wire # 274 :: b7\n",
        18.80252504348755
    ],
    [
        "\t[input] Value of Wire # 283 :: f2\n",
        18.83299684524536
    ],
    [
        "\t[input] Value of Wire # 292 :: cb\n",
        18.86449384689331
    ],
    [
        "\t[input] Value of Wire # 301 :: 99\n",
        18.896419048309326
    ],
    [
        "\t[input] Value of Wire # 310 :: cf\n",
        18.928931951522827
    ],
    [
        "\t[input] Value of Wire # 319 :: a3\n",
        18.961578130722046
    ],
    [
        "\t[input] Value of Wire # 328 :: 2f\n",
        18.9955997467041
    ],
    [
        "\t[input] Value of Wire # 337 :: d4\n",
        19.03003478050232
    ],
    [
        "\t[input] Value of Wire # 346 :: 0\n",
        19.06466770172119
    ],
    [
        "\t[input] Value of Wire # 355 :: 0\n",
        19.09742021560669
    ],
    [
        "\t[input] Value of Wire # 364 :: 0\n",
        19.129918575286865
    ],
    [
        "\t[input] Value of Wire # 373 :: 0\n",
        19.15947961807251
    ],
    [
        "\t[input] Value of Wire # 382 :: 0\n",
        19.18903160095215
    ],
    [
        "\t[input] Value of Wire # 391 :: 0\n",
        19.22341251373291
    ],
    [
        "\t[input] Value of Wire # 400 :: 0\n",
        19.260552167892456
    ],
    [
        "\t[input] Value of Wire # 409 :: 0\n",
        19.298308849334717
    ],
    [
        "Done",
        19.560730457305908
    ]
]