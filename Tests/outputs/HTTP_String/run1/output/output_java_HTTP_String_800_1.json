[
    [
        "800\n",
        0.2720189094543457
    ],
    [
        "[1st Phase] Running Initial Circuit Analysis for < Test_HTTP_String >\n",
        0.2762579917907715
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        0.7370610237121582
    ],
    [
        "Num of variable reads = 1480\n",
        0.7432067394256592
    ],
    [
        "Num of conditional writes = 0\n",
        0.751856803894043
    ],
    [
        "Num of words per element = 1\n",
        0.759244441986084
    ],
    [
        "Num of variable writes = 0\n",
        0.7698111534118652
    ],
    [
        "num of accesses = 1480\n",
        0.7786190509796143
    ],
    [
        "Packing Option = 1\n",
        0.7867889404296875
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        0.7950794696807861
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        0.8040347099304199
    ],
    [
        "done with read only memory solutions!\n",
        1.660473108291626
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.6719245910644531
    ],
    [
        "Num of variable reads = 128\n",
        1.6834452152252197
    ],
    [
        "Num of conditional writes = 0\n",
        1.6930620670318604
    ],
    [
        "Num of words per element = 1\n",
        1.7001397609710693
    ],
    [
        "Num of variable writes = 0\n",
        1.7069544792175293
    ],
    [
        "num of accesses = 128\n",
        1.7146329879760742
    ],
    [
        "Packing Option = 1\n",
        1.7222435474395752
    ],
    [
        "Decision: Using Network mode for this memory\n",
        1.7305657863616943
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        1.738142728805542
    ],
    [
        "Num of variable reads = 520\n",
        1.7456445693969727
    ],
    [
        "Num of conditional writes = 0\n",
        1.7531991004943848
    ],
    [
        "Num of words per element = 1\n",
        1.7615022659301758
    ],
    [
        "Num of variable writes = 0\n",
        1.7691419124603271
    ],
    [
        "num of accesses = 520\n",
        1.776747226715088
    ],
    [
        "Packing Option = 1\n",
        1.7846043109893799
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        1.792680025100708
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        1.8004403114318848
    ],
    [
        "done with read only memory solutions!\n",
        2.4157357215881348
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.4233691692352295
    ],
    [
        "Num of variable reads = 128\n",
        2.43060040473938
    ],
    [
        "Num of conditional writes = 0\n",
        2.4378037452697754
    ],
    [
        "Num of words per element = 1\n",
        2.44490122795105
    ],
    [
        "Num of variable writes = 0\n",
        2.4521496295928955
    ],
    [
        "num of accesses = 128\n",
        2.460188388824463
    ],
    [
        "Packing Option = 1\n",
        2.467674732208252
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.4753692150115967
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.483752965927124
    ],
    [
        "Num of variable reads = 71\n",
        2.4912712574005127
    ],
    [
        "Num of conditional writes = 0\n",
        2.498586654663086
    ],
    [
        "Num of words per element = 1\n",
        2.5060079097747803
    ],
    [
        "Num of variable writes = 0\n",
        2.514427661895752
    ],
    [
        "num of accesses = 71\n",
        2.522109031677246
    ],
    [
        "Packing Option = 1\n",
        2.5296530723571777
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.5373008251190186
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.5458595752716064
    ],
    [
        "Num of variable reads = 128\n",
        2.553595542907715
    ],
    [
        "Num of conditional writes = 0\n",
        2.561055898666382
    ],
    [
        "Num of words per element = 1\n",
        2.568607807159424
    ],
    [
        "Num of variable writes = 0\n",
        2.5772578716278076
    ],
    [
        "num of accesses = 128\n",
        2.5850918292999268
    ],
    [
        "Packing Option = 0\n",
        2.592785358428955
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.6005990505218506
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.608955144882202
    ],
    [
        "Num of variable reads = 71\n",
        2.616717576980591
    ],
    [
        "Num of conditional writes = 0\n",
        2.6243112087249756
    ],
    [
        "Num of words per element = 1\n",
        2.6320509910583496
    ],
    [
        "Num of variable writes = 0\n",
        2.6398980617523193
    ],
    [
        "num of accesses = 71\n",
        2.6483640670776367
    ],
    [
        "Packing Option = 1\n",
        2.6560375690460205
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.6644959449768066
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.672321081161499
    ],
    [
        "Num of variable reads = 128\n",
        2.6797924041748047
    ],
    [
        "Num of conditional writes = 0\n",
        2.687183380126953
    ],
    [
        "Num of words per element = 1\n",
        2.6958978176116943
    ],
    [
        "Num of variable writes = 0\n",
        2.703778028488159
    ],
    [
        "num of accesses = 128\n",
        2.711355686187744
    ],
    [
        "Packing Option = 0\n",
        2.718749761581421
    ],
    [
        "Decision: Using Network mode for this memory\n",
        2.726916551589966
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.7347252368927
    ],
    [
        "Num of variable reads = 0\n",
        2.7422707080841064
    ],
    [
        "Num of conditional writes = 0\n",
        2.7496707439422607
    ],
    [
        "Num of words per element = 1\n",
        2.757564067840576
    ],
    [
        "Num of variable writes = 0\n",
        2.765331506729126
    ],
    [
        "num of accesses = 0\n",
        2.7728934288024902
    ],
    [
        "Packing Option = 0\n",
        2.780358076095581
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        2.788022994995117
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        2.796518325805664
    ],
    [
        "Num of variable reads = 8040\n",
        2.8041985034942627
    ],
    [
        "Num of conditional writes = 0\n",
        2.8121659755706787
    ],
    [
        "Num of words per element = 1\n",
        2.8200690746307373
    ],
    [
        "Num of variable writes = 0\n",
        2.8319039344787598
    ],
    [
        "num of accesses = 8040\n",
        2.843834400177002
    ],
    [
        "Packing Option = 1\n",
        2.855506658554077
    ],
    [
        "Decision: Using Read-only O(sqrt n) mode for this memory\n",
        2.867455005645752
    ],
    [
        "Attempting to solve linear systems for efficient Read-only memory access: Attempt#1 -- bitcount = 15\n",
        2.8789944648742676
    ],
    [
        "done with read only memory solutions!\n",
        3.2354836463928223
    ],
    [
        "Analyzing memory workload (more updates optimizing memory access costs are expected soon) .. \n",
        3.2444422245025635
    ],
    [
        "Num of variable reads = 0\n",
        3.254685878753662
    ],
    [
        "Num of conditional writes = 0\n",
        3.2649238109588623
    ],
    [
        "Num of words per element = 1\n",
        3.272866725921631
    ],
    [
        "Num of variable writes = 0\n",
        3.2830915451049805
    ],
    [
        "num of accesses = 0\n",
        3.295100212097168
    ],
    [
        "Packing Option = 1\n",
        3.3074145317077637
    ],
    [
        "Decision: Using Linear mode for this memory\n",
        3.3161346912384033
    ],
    [
        "Phase 1: Analysis Completed!\n",
        3.3236582279205322
    ],
    [
        "[2nd Phase] Running Circuit Generator for < Test_HTTP_String >\n",
        3.3329379558563232
    ],
    [
        "Circuit Generation Done for < Test_HTTP_String >  \n",
        8.146047592163086
    ],
    [
        " \t Total Number of Constraints :  1984853\n",
        8.161102771759033
    ],
    [
        "\n",
        8.17616891860962
    ],
    [
        "Instruction queue size: 7086993\n",
        8.191734075546265
    ],
    [
        "Normal execution\n",
        16.97284173965454
    ],
    [
        "Running Sample Run: run8001\n",
        17.005751132965088
    ],
    [
        "Url assignment done\n",
        17.045426607131958
    ],
    [
        "Evaluating Input on the circuit \n",
        17.07734751701355
    ],
    [
        "\t[input] Value of Wire # 0 (The one-input wire.) :: 1\n",
        17.10895013809204
    ],
    [
        "\t[input] Value of Wire # 2 :: 6e8\n",
        17.14401865005493
    ],
    [
        "\t[input] Value of Wire # 19 :: 108\n",
        17.178897619247437
    ],
    [
        "\t[input] Value of Wire # 20 :: 4\n",
        17.220473051071167
    ],
    [
        "\t[input] Value of Wire # 21 :: 9\n",
        17.251460552215576
    ],
    [
        "\t[input] Value of Wire # 22 :: e3\n",
        17.276616096496582
    ],
    [
        "\t[input] Value of Wire # 31 :: bf\n",
        17.304424285888672
    ],
    [
        "\t[input] Value of Wire # 40 :: a4\n",
        17.333470106124878
    ],
    [
        "\t[input] Value of Wire # 49 :: 1\n",
        17.36262607574463
    ],
    [
        "\t[input] Value of Wire # 58 :: a4\n",
        17.392033338546753
    ],
    [
        "\t[input] Value of Wire # 67 :: 40\n",
        17.419416189193726
    ],
    [
        "\t[input] Value of Wire # 76 :: ed\n",
        17.447388648986816
    ],
    [
        "\t[input] Value of Wire # 85 :: 41\n",
        17.475538730621338
    ],
    [
        "\t[input] Value of Wire # 94 :: f\n",
        17.503477096557617
    ],
    [
        "\t[input] Value of Wire # 103 :: 3b\n",
        17.53109884262085
    ],
    [
        "\t[input] Value of Wire # 112 :: d0\n",
        17.558677673339844
    ],
    [
        "\t[input] Value of Wire # 121 :: b2\n",
        17.586484670639038
    ],
    [
        "\t[input] Value of Wire # 130 :: 5e\n",
        17.614716053009033
    ],
    [
        "\t[input] Value of Wire # 139 :: 1f\n",
        17.642935037612915
    ],
    [
        "\t[input] Value of Wire # 148 :: b7\n",
        17.671123027801514
    ],
    [
        "\t[input] Value of Wire # 157 :: 92\n",
        17.699353456497192
    ],
    [
        "\t[input] Value of Wire # 166 :: 9f\n",
        17.736191511154175
    ],
    [
        "\t[input] Value of Wire # 175 :: 37\n",
        17.779109716415405
    ],
    [
        "\t[input] Value of Wire # 184 :: 6b\n",
        17.806249618530273
    ],
    [
        "\t[input] Value of Wire # 193 :: 74\n",
        17.83777904510498
    ],
    [
        "\t[input] Value of Wire # 202 :: bb\n",
        17.864640951156616
    ],
    [
        "\t[input] Value of Wire # 211 :: 39\n",
        17.892051219940186
    ],
    [
        "\t[input] Value of Wire # 220 :: 5\n",
        17.920003414154053
    ],
    [
        "\t[input] Value of Wire # 229 :: 2b\n",
        17.9479877948761
    ],
    [
        "\t[input] Value of Wire # 238 :: 43\n",
        17.975796937942505
    ],
    [
        "\t[input] Value of Wire # 247 :: 1d\n",
        18.00838851928711
    ],
    [
        "\t[input] Value of Wire # 256 :: 93\n",
        18.06319284439087
    ],
    [
        "\t[input] Value of Wire # 265 :: a9\n",
        18.1207435131073
    ],
    [
        "\t[input] Value of Wire # 274 :: b7\n",
        18.161681175231934
    ],
    [
        "\t[input] Value of Wire # 283 :: f2\n",
        18.189859867095947
    ],
    [
        "\t[input] Value of Wire # 292 :: cb\n",
        18.21912956237793
    ],
    [
        "\t[input] Value of Wire # 301 :: 99\n",
        18.24839162826538
    ],
    [
        "\t[input] Value of Wire # 310 :: cf\n",
        18.280158042907715
    ],
    [
        "\t[input] Value of Wire # 319 :: a3\n",
        18.348028898239136
    ],
    [
        "\t[input] Value of Wire # 328 :: 2f\n",
        18.40455412864685
    ],
    [
        "\t[input] Value of Wire # 337 :: d4\n",
        18.442113399505615
    ],
    [
        "\t[input] Value of Wire # 346 :: 0\n",
        18.471109628677368
    ],
    [
        "\t[input] Value of Wire # 355 :: 0\n",
        18.501646041870117
    ],
    [
        "\t[input] Value of Wire # 364 :: 0\n",
        18.534040689468384
    ],
    [
        "\t[input] Value of Wire # 373 :: 0\n",
        18.56405019760132
    ],
    [
        "\t[input] Value of Wire # 382 :: 0\n",
        18.597919702529907
    ],
    [
        "\t[input] Value of Wire # 391 :: 0\n",
        18.6322078704834
    ],
    [
        "\t[input] Value of Wire # 400 :: 0\n",
        18.677945137023926
    ],
    [
        "\t[input] Value of Wire # 409 :: 0\n",
        18.709861993789673
    ],
    [
        "\t[input] Value of Wire # 418 :: 0\n",
        18.742572784423828
    ],
    [
        "\t[input] Value of Wire # 427 :: 0\n",
        18.77877426147461
    ],
    [
        "\t[input] Value of Wire # 436 :: 0\n",
        18.815623998641968
    ],
    [
        "\t[input] Value of Wire # 445 :: 0\n",
        18.85137176513672
    ],
    [
        "\t[input] Value of Wire # 454 :: 0\n",
        18.884934902191162
    ],
    [
        "\t[input] Value of Wire # 463 :: 0\n",
        18.917219161987305
    ],
    [
        "\t[input] Value of Wire # 472 :: 0\n",
        18.94953727722168
    ],
    [
        "\t[input] Value of Wire # 481 :: 0\n",
        18.981860399246216
    ],
    [
        "\t[input] Value of Wire # 490 :: 0\n",
        19.014554023742676
    ],
    [
        "\t[input] Value of Wire # 499 :: 0\n",
        19.04683828353882
    ],
    [
        "\t[input] Value of Wire # 508 :: 0\n",
        19.079716444015503
    ],
    [
        "\t[input] Value of Wire # 517 :: 0\n",
        19.115596532821655
    ],
    [
        "\t[input] Value of Wire # 526 :: 0\n",
        19.152209043502808
    ],
    [
        "\t[input] Value of Wire # 535 :: 0\n",
        19.188718557357788
    ],
    [
        "\t[input] Value of Wire # 544 :: 0\n",
        19.22535800933838
    ],
    [
        "\t[input] Value of Wire # 553 :: 0\n",
        19.261561393737793
    ],
    [
        "\t[input] Value of Wire # 562 :: 0\n",
        19.29565691947937
    ],
    [
        "\t[input] Value of Wire # 571 :: 0\n",
        19.327617645263672
    ],
    [
        "Done",
        19.580097913742065
    ]
]